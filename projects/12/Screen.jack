// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, x;
        let twoToThe = Array.new(16);
        let i = 0;
        let x = 1;
        while (i < 16) {
            let twoToThe[i] = x;
            let x = x + x;
            let i = i + 1;
        }
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        do Screen.setColor(color);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = 16384 + (32 * y) + (x / 16);
        let value = Memory.peek(address);
        let x = x - (16 * (x / 16));
        if (color) {
            let value = value | twoToThe[x];
        } else {
            let value = value & ~twoToThe[x];
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        var boolean ne;

        if (x2 < x1) {
            let dx = x1;
            let x1 = x2;
            let x2 = dx;
            let dy = y1;
            let y1 = y2;
            let y2 = dy;
        }
        let dx = x2 - x1;

        let dy = y2 - y1;
        let ne = dy < 0;
        if (ne) {
            let dy = -dy;
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        while (~(a > dx) & ~(b > dy)) {
            if (ne) {
                do Screen.drawPixel(x1 + a, y1 - b);
            } else {
                do Screen.drawPixel(x1 + a, y1 + b);
            }
            if ((diff < 0) | (dy = 0)) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int cury;
        let cury = y1;
        while (~(cury = (y2 + 1))) {
            do Screen.drawLine(x1, cury, x2, cury);
            let cury = cury + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int cx, int cy, int r) {
        var int dy, dx;
        let dy = -r;
        while (~(dy = (r + 1))) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(cx - dx, cy + dy, cx + dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
