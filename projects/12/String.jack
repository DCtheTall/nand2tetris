// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int curLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength);
        let curLength = 0;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[curLength] = c;
        let curLength = curLength + 1;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let curLength = curLength - 1;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, result;
        var bool isNegative;
        let i = 0;
        let isNegative = false;
        if (curLength > 0) {
            if (str[0] == 45) { // negative sign.
                let isNegative = true;
                let i = 1;
            }
        }
        let result = 0;
        while (i < curLength) {
            if ((str[i] > 47) & (str[i] < 58)) {
                let result = 10 * result;
                let result = result + (str[i] - 48);
            }
            let i = i + 1;
        }
        if (isNegative) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    }

    /** Returns the new line character. */
    function char newLine() {
    }

    /** Returns the backspace character. */
    function char backSpace() {
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    }
}
