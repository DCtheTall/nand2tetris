// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int curLength;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int aMaxLength) {
        let maxLength = aMaxLength;
        let curLength = 0;
        if (maxLength = 0) {
            return this;
        }
        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength > 0) {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[curLength] = c;
        let curLength = curLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let curLength = curLength - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, result;
        var bool isNegative;
        let i = 0;
        let isNegative = false;
        if (curLength > 0) {
            if (str[0] = 45) { // negative sign.
                let isNegative = true;
                let i = 1;
            }
        }
        let result = 0;
        while (i < curLength) {
            if ((str[i] > 47) & (str[i] < 58)) {
                let result = 10 * result;
                let result = result + (str[i] - 48);
            }
            let i = i + 1;
        }
        if (isNegative) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int i) {
        var Array digits;
        var boolean neg, loop;
        var int powTen, digit, idx;

        let str = Array.new(maxLength);
        let curLength = 0;

        if (i = 0) {
            do appendChar(48);
            return;
        }
        let neg = false;
        if (i < 0) {
            let neg = true;
            let i = -i;
        }

        let digits = Array.new(5);  // log(2^15-1) ~= 4.5
        let powTen = 1;
        let loop = true;
        let idx = 4;

        while (loop) {
            if (~((i / powTen) = 0)) {
                let digit = i / powTen;
                let digit = digit - (10 * (digit / 10));
                let digits[idx] = digit;
                let idx = idx - 1;
            } else {
                let digits[idx] = -1;
                let idx = idx - 1;
            }
            if (powTen = 10000) {
                let loop = false;
            } else {
                let powTen = 10 * powTen;
            }
        }

        if (neg) {
            do appendChar(45);  // Negative sign.
        }

        let idx = 0;
        while (idx < 5) {
            if (digits[idx] > -1) {
                do appendChar(48 + digits[idx]);
            }
            let idx = idx + 1;
        }

        do digits.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
