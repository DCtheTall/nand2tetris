// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // True if the instruction is a C-instruction and the A destination bit is
    // set. Used as a selector for the Mux16 below.
    And(a=instruction[15], b=instruction[5], out=aluToA);
    // The input to the A register should be either the instruction or the
    // output of the ALU.
    Mux16(a=instruction, b=aluout, sel=aluToA, out=ain);
    // True if the instruction is an A-instruction.
    Not(in=instruction[15], out=ainstruction);
    // True if instruction is an A-instruction or A is the destination of a
    // C-instruction.
    Or(a=aluToA, b=ainstruction, out=loadA);

    // A register
    ARegister(in=ain, load=loadA, out=aout);
    Or16(a=false, b=aout, out[0..14]=addressM);

    // True if instruction is a C-instruction and the D destination bit is set.
    And(a=instruction[4], b=instruction[15], out=loadD);
    // D register
    DRegister(in=aluout, load=loadD, out=dout);

    // The second input to the ALU is either A or M register depending on the
    // value of the a-bit.
    Mux16(a=aout, b=inM, sel=instruction[12], out=aluy);
    ALU(
        x=dout, y=aluy,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluout, zr=zr, ng=ng);

    // outM
    Or16(a=false, b=aluout, out=outM);

    // Jump conditions for PC based on the output of the ALU.
    And(a=ng, b=instruction[2], out=jng);
    And(a=zr, b=instruction[1], out=jzr);
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=pos);
    And(a=pos, b=instruction[0], out=jpos);
    Or(a=jng, b=jzr, out=jle);
    Or(a=jle, b=jpos, out=jmp);
    // Only jump during C-instructions.
    And(a=jmp, b=instruction[15], out=loadPC);

    PC(in=aout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    // Write to memory only during a C-instruction when the M destination bit
    // is set.
    And(a=instruction[15], b=instruction[3], out=writeM);
}