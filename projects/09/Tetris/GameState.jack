/** GameState class encapsulates the game state and operations to modify state */
class GameState {
    field BrickQueue queue;
    field int score;
    field FallingBrick fallingBrick;
    field Grid grid;
    field bool gameOver;
    field int pointsPerRow;
    field bool animatingRow;
    field int rowAnimationFrame;
    field int rowAnimationLength;

    constructor GameState new() {
        let queue = BrickQueue.new(5);
        let score = 0;
        let fallingBrick = FallingBrick.new(queue.dequeue());
        let grid = Grid.new(10, 20);
        let gameOver = false;
        let pointsPerRow = 100;
        let animatingRow = false;
        let rowAnimationFrame = 0;
        let rowAnimationLength = 6;
        return this;
    }

    method void dispose() {
        do queue.dispose();
        do fallingBrick.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method BrickQueue getQueue() { return queue; }

    method int getScore() { return score; }
    
    method FallingBrick getFallingBrick() { return fallingBrick; }

    method Grid getGrid() { return grid; }

    method bool isGameOver() { return gameOver; }

    /** Update the game state from a clock tick */
    method void onClockTick() {
        var int rowsComplete;
        if (animatingRow) {
            let rowAnimationFrame = rowAnimationFrame + 1;
            do grid.tickAnimation(MathExt.mod(rowAnimationFrame, 2) = 0);
            if (rowAnimationFrame = rowAnimationLength) {
                do grid.clearCompleteRows();
                let animatingRow = false;
            }
        } else {
            if (~fallingBrick.isSpawned()) {
                do fallingBrick.spawn(grid);
            }
            if (fallingBrick.tickGravity(grid)) {
                do grid.writeFallingBrickToGrid(fallingBrick);
                if (fallingBrick.gameOver(grid)) {
                    let gameOver = true;
                    return;
                }
                let fallingBrick = FallingBrick.new(queue.dequeue());
                let rowsComplete = grid.rowsComplete();
                if (rowsComplete > 0) {
                    let score = score + (pointsPerRow * rowsComplete);
                    let animatingRow = true;
                    let rowAnimationFrame = 0;
                    do grid.startAnimation();
                }
            }
        }
        return;
    }

    /** Update the state from a user action */
    method void onAction(KeyInput input) {
        if (animatingRow | (~fallingBrick.isSpawned())) {
            return;
        }
        if (input.isLeftArrow()) {
            do fallingBrick.moveLeft(grid);
            return;
        }
        if (input.isRightArrow()) {
            do fallingBrick.moveRight(grid);
            return;
        }
        if (input.isDownArrow()) {
            do fallingBrick.fastFall(grid);
            return;
        }
        // input.isUpArrow
        do fallingBrick.rotate(grid);
        return;
    }
}
