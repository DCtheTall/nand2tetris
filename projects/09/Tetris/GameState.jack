/** GameState class encapsulates the game state and operations to modify state */
class GameState {
    field BrickQueue queue;
    field int score;
    field FallingBrick fallingBrick;
    field Grid grid;
    field bool gameOver;

    constructor GameState new() {
        let queue = BrickQueue.new(5);
        let score = 0;
        let fallingBrick = FallingBrick.new(queue.dequeue());
        let grid = Grid.new(10, 20);
        let gameOver = false;
        return this;
    }

    method void dispose() {
        do queue.dispose();
        do fallingBrick.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method BrickQueue getQueue() { return queue; }

    method int getScore() { return score; }
    
    method FallingBrick getFallingBrick() { return fallingBrick; }

    method Grid getGrid() { return grid; }

    method bool isGameOver() { return gameOver; }

    method void onClockTick() {
        // TODO check row animation
        if (~fallingBrick.isSpawned()) {
            do fallingBrick.spawn(grid);
        }
        if (fallingBrick.tickGravity(grid)) {
            do grid.writeFallingBrickToGrid(fallingBrick);
            if (fallingBrick.gameOver(grid)) {
                let gameOver = true;
                return;
            }
            let fallingBrick = FallingBrick.new(queue.dequeue());
            // TODO check row completed, if so award points and start row animation
        }
        return;
    }
}
