class FallingBrick {
    field Brick brick;
    field bool spawned;
    field int x;
    field int y;

    constructor FallingBrick new(Brick aBrick) {
        let brick = aBrick;
        let spawned = false;
        return this;
    }

    method void dispose() {
        do brick.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int getX() { return x; }

    method int getY() { return y; }

    method int getBrick() { return brick; }

    method bool isSpawned() { return spawned; }

    /** Spawn a new falling brick */
    method void spawn(Grid grid) {
        var int gridWidth;
        var int brickSize;
        let spawned = true;
        let gridWidth = grid.getWidth();
        let brickSize = brick.shapeSize();
        let x = (gridWidth - brickSize) / 2;
        let y = -brickSize;
        return;
    }

    /** Returns true if the falling brick can no longer fall */
    method bool tickGravity(Grid grid) {
        if (~canFall(grid)) {
            return true;
        }
        let y = y + 1;
        return false;
    }

    /** Returns true if the brick can fall to the next spot */
    method bool canFall(Grid grid) {
        return (~isTouchingFloor(grid)) & (~isOnTopOfBricks(grid));
    }

    /** Returns true if the falling brick is touching the floor */
    method bool isTouchingFloor(Grid grid) {
        var int size;
        var int sizeSquared;
        var int height;
        var Array shape;
        var int i;

        let size = brick.shapeSize();
        let sizeSquared = size * size;
        let height = grid.getHeight();
        let shape = brick.rotatedShape();
        
        let i = sizeSquared - 1;
        while (i > -1) {
            if (shape[i] & (((i / size) + y + 1) = height)) {
                do shape.dispose();
                return true;
            }
            let i = i - 1;
        }
        do shape.dispose();
        return false;
    }

    /** Returns true if the falling brick is on top of bricks in the grid */
    method bool isOnTopOfBricks(Grid grid) {
        return collision(grid, x, y + 1);
    }

    /** Returns true if the falling brick is colliding with any brick in the grid */
    method bool collision(Grid grid, int x0, int y0) {
        var Array shape;
        var int size;
        var int sizeSquared;
        var int width;
        var int i;
        var int gx;
        var int gy;

        let shape = brick.rotatedShape();
        let size = brick.shapeSize();
        let sizeSquared = size * size;
        let width = grid.getWidth();

        let i = 0;
        while (i < sizeSquared) {
            if (shape[i]) {
                let gx = x0 + MathExt.mod(i, size);
                let gy = y0 + (i / size);
                if (grid.cellAtIndex((gy * width) + gx)) {
                    do shape.dispose();
                    return true;
                }
            }
            let i = i + 1;
        }

        do shape.dispose();
        return false;
    }

    /** Returns true if the falling brick lands above the screen */
    method bool gameOver(Grid grid) {
        return isOnTopOfBricks(grid) & (y < 0);
    }

    /** Move the falling brick to the left */
    method void moveLeft(Grid grid) {
        if (~canMove(grid, true)) {
            return;
        }
        let x = x - 1;
        return;
    }
    
    /** Move the falling brick to the right */
    method void moveRight(Grid grid) {
        if (~canMove(grid, false)) {
            return;
        }
        let x = x + 1;
        return;
    }

    /** Returns true if the falling brick can move left or right */
    method bool canMove(Grid grid, bool left) {
        var int dx;
        if (left) {
            let dx = -1;
        } else {
            let dx = 1;
        }
        return ~(isTouchingWall(left, grid.getWidth()) | collision(grid, x + dx, y));
    }

    /** Returns true if the falling brick is touching the wall */
    method bool isTouchingWall(bool left, int gridWidth) {
        var Array shape;
        var int size;
        var int sizeSquared;
        var int bound;
        var int i;

        let shape = brick.rotatedShape();
        let size = brick.shapeSize();
        let sizeSquared = size * size;
        if (left) {
            let bound = 0;
        } else {
            let bound = gridWidth - 1;
        }

        let i = 0;
        while (i < sizeSquared) {
            if (shape[i] & ((x + MathExt.mod(i, size)) = bound)) {
                do shape.dispose();
                return true;
            }
            let i = i + 1;
        }

        do shape.dispose();
        return false;
    }

    /** Causes the falling brick to fall as long as it doesn't collide */
    method void fastFall(Grid grid) {
        while (canFall(grid)) {
            let y = y + 1;
        }
        return;
    }

    /** Rotate the current falling brick, does wallkicks if the brick is colliding */
    method void rotate(Grid grid) {
        var bool isIBlock;
        var int orientation;
        var int i;
        var Array wallkick;

        if (brick.isOBlock()) {
            return;
        }

        do brick.rotate();

        let isIBlock = brick.isIBlock();
        let orientation = brick.getOrientation();

        let i = 0;
        while (i < WallKickMap.getNPairsPerOrientation()) {
            let wallkick = WallKickMap.getWallkick(isIBlock, orientation, i);
            if (~collision(grid, x + wallkick[0], y + wallkick[1])) {
                let x = x + wallkick[0];
                let y = y + wallkick[1];
                do wallkick.dispose();
                return;
            }
            let i = i + 1;
        }
        
        do brick.undoRotate();
        do wallkick.dispose();
        return;
    }
}
