/** BrickQueue class handles operations for the queue of upcoming bricks yet to come into play */
class BrickQueue {
    field int size;
    field Array queue;

    constructor BrickQueue new(int aSize) {
        var int i;

        let size = aSize;
        let queue = Array.new(size);

        let i = 0;
        while (i < size) {
            let queue[i] = Brick.randomBrickType();
            let i = i + 1;
        }

        return this;
    }

    method void dispose() {
        do queue.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int getSize() { return size; }

    method Brick getBrickTypeAtIndex(int i) { return queue[i]; }

    /** Dequeue the next brick and insert a random brick type in the end of the queue */
    method Brick dequeue() {
        var Brick result;
        var int i;

        let result = queue[0];
        let i = 1;
        while (i < size) {
            let queue[i-1] = queue[i];
            let i = i + 1;
        }
        let queue[size-1] = Brick.randomBrickType();
        return result;
    }
}
