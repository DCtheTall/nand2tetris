/** Game event loop */
class GameLoop {
    field Clock clock;
    field GameState state;
    field bool exit;

    constructor GameLoop new() {
        let clock = Clock.new(2500);
        let state = GameState.new();
        return this;
    }

    method void dispose() {
        do clock.dispose();
        do state.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Run the game loop which updates the GameState and calls Renderer functions */
    method void run() {
        var KeyInput input;
        var bool previousNoAction;
        var bool curNoAction;
        var bool clockTicked;
        
        let previousNoAction = false;
        do Renderer.renderGameStart(state);

        while (true) {
            let input = KeyInput.readInput();
            let curNoAction = input.isNoAction();
            let clockTicked = clock.tick();
            
            if (~(curNoAction = previousNoAction)) {
                if ((~curNoAction) & (~state.isGameOver())) {
                    do state.onAction(input);
                }
                let previousNoAction = curNoAction;
            } else {
                if (clockTicked) {
                    do state.onClockTick();
                    if (state.isGameOver()) {
                        do clock.stop();
                    }
                    do Renderer.renderState(state);
                }
            }
            do input.dispose();
        }
        return;
    }
}
