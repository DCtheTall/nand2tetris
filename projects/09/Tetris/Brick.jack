/** Brick class provides an abstraction for the different types of bricks used in the game. */
class Brick {
    static int nTypes;

    field int type;
    field int orientation;

    constructor Brick new(int aType) {
        let type = aType;
        let orientation = 0;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method bool isIBlock() { return type = 0; }

    method bool isLBlock() { return type = 1; }

    method bool isJBlock() { return type = 2; }

    method bool isOBlock() { return type = 3; }

    method bool isSBlock() { return type = 4; }

    method bool isZBlock() { return type = 5; }

    // T-block type = 6

    method int getOrientation() { return orientation; }

    /** Return the size of one size of the brick type's shape grid */
    method int shapeSize() {
        if (isIBlock()) {
            return 4;
        }
        if (isOBlock()) {
            return 2;
        }
        return 3;
    }

    /** Returns a (shapeSize * shapeSize) length array which is true that defines the brick shape */
    method Array shape() {
        var int size;
        var int sizeSquared;
        var Array result;
        var int i;

        let size = shapeSize();
        let sizeSquared = size * size;
        let result = Array.new(sizeSquared);

        let i = 0;
        while (i < sizeSquared) {
            let result[i] = indexInShape(i);
            let i = i + 1;
        }
        return result;
    }

    /** Returns if an index in a shape array is part of the brick's actual shape */
    method bool indexInShape(int i) {
        if (isIBlock()) {
            return MathExt.inRange(i, 4, 8);
        }
        if (isLBlock()) {
            return (i = 0) | MathExt.inRange(i, 3, 6);
        }
        if (isJBlock()) {
            return (i = 2) | MathExt.inRange(i, 3, 6);
        }
        if (isOBlock()) {
            return true;
        }
        if (isSBlock()) {
            return MathExt.inRange(i, 1, 3) | MathExt.inRange(i, 3, 5);
        }
        if (isZBlock()) {
            return MathExt.inRange(i, 0, 2) | MathExt.inRange(i, 4, 6);
        }
        // T-block
        return (i = 1) | MathExt.inRange(i, 3, 6);
    }

    /** Rotate the brick */
    method void rotate() {
        let orientation = MathExt.mod(orientation + 1, 4);
        return;
    }

    /** Undoes a rotation in case there are no valid places for the brick to be rendered */
    method void undoRotate() {
        let orientation = MathExt.mod(orientation - 1, 4);
        return;
    }

    /** Returns the shape array rotated to the brick's current orientation */
    method Array rotatedShape() {
        var Array curShape;
        var Array tmp;
        var int i;
        var int size;

        let curShape = shape();
        if (isOBlock()) {
            return curShape;
        }

        let size = shapeSize();
        let i = 0;
        while (i < orientation) {
            let tmp = Brick.rotateShape(curShape, size);
            do curShape.dispose();
            let curShape = tmp;
            let i = i + 1;
        }

        return curShape;
    }

    /** Initialize the values used for static functions */
    function void init() {
        let nTypes = 7;
        return;
    }

    /** Return a pseudorandom brick type */
    function Brick randomBrickType() {
        return Brick.new(Random.randRange(nTypes));
    }

    /** Returns the maximum side length of a brick shape */
    function int maxShapeSize() { return 4; }

    /** Rotates a brick shape array to the next orientation */
    function Array rotateShape(Array prevShape, int size) {
        var int sizeSquared;
        var Array result;
        var int i;
        var int newIdx;

        let sizeSquared = size * size;
        let result = Array.new(sizeSquared);

        let i = 0;
        while (i < sizeSquared) {
            let newIdx = (MathExt.mod(i, size) * size) + (size - 1 - (i / size));
            let result[newIdx] = prevShape[i];
            let i = i + 1;
        }

        return result;
    }
}
