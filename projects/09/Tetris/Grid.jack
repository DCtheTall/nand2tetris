class Grid {
    field int width;
    field int height;
    field Array grid;

    constructor Grid new(int aWidth, int aHeight) {
        var int i;
        var int area;
        let width = aWidth;
        let height = aHeight;
        let area = width * height;
        let grid = Array.new(area);
        let i = 0;
        while (i < area) {
            let grid[i] = false;
            let i = i + 1;
        }
        return this;
    }

    method void dispose() {
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int getWidth() { return width; }

    method int getHeight() { return height; }

    method bool cellAtIndex(int i) { return grid[i]; }

    method void writeFallingBrickToGrid(FallingBrick fallingBrick) {
        var Brick brick;
        var Array shape;
        var int size;
        var int sizeSquared;
        var int x;
        var int y;
        var int i;
        var int coord;

        let brick = fallingBrick.getBrick();
        let shape = brick.rotatedShape();
        let size = brick.shapeSize();
        let sizeSquared = size * size;
        let x = fallingBrick.getX();
        let y = fallingBrick.getY();

        let i = 0;
        while (i < sizeSquared) {
            if (shape[i]) {
                let coord = width * y + ((i / size) * width);
                let coord = coord + x + MathExt.mod(i, size);
                let grid[coord] = true;
            }
            let i = i + 1;
        }
        do shape.dispose();
        return;
    }
}
