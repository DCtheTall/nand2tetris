/** Grid contains operations on the grid of static bricks that have finished falling */
class Grid {
    field int width;
    field int height;
    field Array grid;
    field Array rowsAnimating;

    constructor Grid new(int aWidth, int aHeight) {
        var int i;
        var int area;
        let width = aWidth;
        let height = aHeight;
        let grid = Array.new(area());
        let i = 0;
        while (i < area) {
            let grid[i] = false;
            let i = i + 1;
        }
        let rowsAnimating = Array.new(height);
        return this;
    }

    method void dispose() {
        do grid.dispose();
        do rowsAnimating.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int getWidth() { return width; }

    method int getHeight() { return height; }

    method int area() { return width * height; }
 
    /** Returns if the cell at a given index contains a brick */
    method bool cellAtIndex(int i) {
        if (i < 0 | MathExt.geq(i, area())) {
            return false;
        }
        return grid[i];
    }

    method Array copyArray() {
        var Array result;
        var int i;

        let result = Array.new(area());
        let i = 0;
        while (i < area()) {
            let result[i] = grid[i];
            let i = i + 1;
        }

        return result;
    }

    /** Writes the falling brick to the grid */
    method void writeFallingBrickToGrid(FallingBrick fallingBrick) {
        var Brick brick;
        var Array shape;
        var int size;
        var int sizeSquared;
        var int x;
        var int y;
        var int i;
        var int coord;

        let brick = fallingBrick.getBrick();
        let shape = brick.rotatedShape();
        let size = brick.shapeSize();
        let sizeSquared = size * size;
        let x = fallingBrick.getX();
        let y = fallingBrick.getY();

        let i = 0;
        while (i < sizeSquared) {
            if (shape[i]) {
                let coord = width * y + ((i / size) * width);
                let coord = coord + x + MathExt.mod(i, size);
                let grid[coord] = true;
            }
            let i = i + 1;
        }
        do shape.dispose();
        return;
    }

    /** Returns true if the given row is full */
    method bool isRowComplete(int row) {
        var int i;
        let i = 0;
        while (i < width) {
            if (grid[(row * width) + i]) {
                let i = i + 1;
            } else {
                return false;
            }
        }
        return true;
    }

    /** Returns the number of full rows */
    method int rowsComplete() {
        var int i;
        var int result;
        let i = 0;
        let result = 0;
        while (i < height) {
            if (isRowComplete(i)) {
                let result = result + 1;
            }
            let i = i + 1;
        }
        return result;
    }

    /** Starts the animation when a row is filled */
    method void startAnimation() {
        var int i;
        let i = 0;
        while (i < height) {
            let rowsAnimating[i] = isRowComplete(i);
            let i = i + 1;
        }
        return;
    }

    /** Ticks the animation when a row is filled */
    method void tickAnimation(bool value) {
        var int i;
        var int j;
        let i = 0;
        while (i < height) {
            if (rowsAnimating[i]) {
                let j = 0;
                while (j < width) {
                    let grid[(i * width) + j] = value;
                    let j = j + 1;
                }
            }
            let i = i + 1;
        }
        return;
    }

    /** Clears all complete rows from the grid */
    method void clearCompleteRows() {
        var Array tmp;
        var int i;
        var int dy;
        var int j;

        let tmp = grid;
        let grid = Array.new(area());
        let i = height - 1;
        let dy = 0;
        while (MathExt.geq(i, 0)) {
            if (rowsAnimating[i]) {
                let dy = dy + 1;
            } else {
                let j = 0;
                while (j < width) {
                    let grid[(i + dy) * width + j] = tmp[(i * width) + j];
                    let j = j + 1;
                }
            }
            let i = i - 1;
        }
        let i = dy;
        while (i > 0) {
            let j = 0;
            while (j < width) {
                let grid[(i - 1) * width + j] = false;
                let j = j + 1;
            }
            let i = i - 1;
        }

        do tmp.dispose();
        return;
    }
}
